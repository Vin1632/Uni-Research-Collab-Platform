{"ast":null,"code":"import{ref,getDownloadURL,uploadBytesResumable}from\"firebase/storage\";import{storage}from'../firebase';export async function proposal_service(id,title,description,link_image,start_date,end_date){try{const response=await fetch('/projects/project',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user_id:id,title:title,description:description,link_image:link_image,start_date:start_date,end_date:end_date})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||errorData.error||'Failed to add Project (endpoint call)');}return await response.json();}catch(error){console.error('Error during api call endpoint:',error);throw error;}}export async function insert_projectData(project_id,title,requirements,link_image,funding,funding_source,start_date,end_date){try{const response=await fetch('/projects/projectdata',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({project_id:project_id,title:title,requirements:requirements,funds:funding,link_image:link_image,funding_source:funding_source,start_date:start_date,end_date:end_date})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||errorData.error||'Failed to insert Projectdata (endpoint call)');}return await response.json();}catch(error){console.error('Error during api call endpoint:',error);throw error;}}export async function get_project_data(id){try{const response=await fetch(\"/projects/recom-projects/\".concat(id),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'failed to fetch projectdata');}return await response.json();}catch(error){console.error(\"Failed to fetch\",error);throw new Error(\"Failed to get the project data\");}}export async function get_each_project_data(id){try{const response=await fetch(\"/projects/projectdata/\".concat(id),{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'failed to fetch Projects data');}return await response.json();}catch(error){console.error(\"Failed to fetch\",error);throw new Error(\"Failed to get Projects Data\");}}export async function get_image_url(image){if(!image){console.log(\"No image provided.\");return\"\";}try{const storageRef=ref(storage,\"files/\".concat(image.name));const metadata={contentType:image.type};const uploadTask=uploadBytesResumable(storageRef,image,metadata);const downloadURL=await new Promise((resolve,reject)=>{uploadTask.on('state_changed',snapshot=>{const progress=snapshot.bytesTransferred/snapshot.totalBytes*100;console.log(\"Upload is \".concat(progress.toFixed(2),\"% done\"));},error=>{console.error(\"Upload error:\",error);reject(error);},async()=>{const url=await getDownloadURL(uploadTask.snapshot.ref);resolve(url);});});return downloadURL;}catch(error){console.error(\"Upload failed:\",error);return\"\";}}","map":{"version":3,"names":["ref","getDownloadURL","uploadBytesResumable","storage","proposal_service","id","title","description","link_image","start_date","end_date","response","fetch","method","headers","body","JSON","stringify","user_id","ok","errorData","json","Error","message","error","console","insert_projectData","project_id","requirements","funding","funding_source","funds","get_project_data","concat","get_each_project_data","get_image_url","image","log","storageRef","name","metadata","contentType","type","uploadTask","downloadURL","Promise","resolve","reject","on","snapshot","progress","bytesTransferred","totalBytes","toFixed","url"],"sources":["/home/vin/Desktop/Practice/Projects/SDP PROJECT/Projects 3/Uni-Research-Collab-Platform/frontend/src/services/proposal_service.js"],"sourcesContent":["\nimport { ref, getDownloadURL, uploadBytesResumable } from \"firebase/storage\";\nimport { storage } from '../firebase'; \n\nexport async function proposal_service(id, title, description, link_image, start_date, end_date) {\n    try {\n        const response = await fetch('/projects/project', { \n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            user_id: id,\n            title: title,\n            description: description,\n            link_image: link_image,\n            start_date: start_date, \n            end_date : end_date\n          }),\n        });\n    \n        if (!response.ok) {\n  \n          const errorData = await response.json();\n            throw new Error(errorData.message || errorData.error || 'Failed to add Project (endpoint call)');\n\n        }\n    \n        return await response.json(); \n      } catch (error) {\n        console.error('Error during api call endpoint:', error);\n        throw error; \n      }\n}\n\n\nexport async function insert_projectData(project_id, title, requirements, link_image, funding, funding_source, start_date, end_date) {\n    try {\n        const response = await fetch('/projects/projectdata', { \n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            project_id: project_id,\n            title : title,\n            requirements: requirements,\n            funds: funding,\n            link_image: link_image,\n            funding_source : funding_source, \n            start_date : start_date, \n            end_date : end_date\n          }),\n        });\n    \n        if (!response.ok) {\n  \n          const errorData = await response.json();\n            throw new Error(errorData.message || errorData.error || 'Failed to insert Projectdata (endpoint call)');\n\n        }\n    \n        return await response.json(); \n      } catch (error) {\n        console.error('Error during api call endpoint:', error);\n        throw error; \n      }\n}\n\nexport async function get_project_data(id) {\n    try {\n        const response = await  fetch(`/projects/recom-projects/${id}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n            }\n        });\n\n        if(!response.ok)\n        {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'failed to fetch projectdata');\n        }\n\n        return await response.json();\n        \n    } catch (error) {\n        console.error(\"Failed to fetch\", error);\n        throw new Error(\"Failed to get the project data\");\n    \n    }\n}\n\nexport async function get_each_project_data(id) {\n  try {\n      const response = await  fetch(`/projects/projectdata/${id}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n          }\n      });\n\n      if(!response.ok)\n      {\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'failed to fetch Projects data');\n      }\n\n      return await response.json();\n      \n  } catch (error) {\n      console.error(\"Failed to fetch\", error);\n      throw new Error(\"Failed to get Projects Data\");\n  \n  }\n}\n\n\nexport async function get_image_url(image) {\n\n  if (!image) {\n    console.log(\"No image provided.\");\n    return \"\";\n  }\n\n  try {\n    const storageRef = ref(storage, `files/${image.name}`);\n    const metadata = {\n      contentType: image.type,\n    };\n\n    const uploadTask = uploadBytesResumable(storageRef, image, metadata);\n\n    const downloadURL = await new Promise((resolve, reject) => {\n      uploadTask.on(\n        'state_changed',\n        (snapshot) => {\n          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(`Upload is ${progress.toFixed(2)}% done`);\n        },\n        (error) => {\n          console.error(\"Upload error:\", error);\n          reject(error);\n        },\n        async () => {\n          const url = await getDownloadURL(uploadTask.snapshot.ref);\n          resolve(url);\n        }\n      );\n    });\n\n    return downloadURL;\n\n  } catch (error) {\n    console.error(\"Upload failed:\", error);\n    return \"\";\n  }\n}\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}