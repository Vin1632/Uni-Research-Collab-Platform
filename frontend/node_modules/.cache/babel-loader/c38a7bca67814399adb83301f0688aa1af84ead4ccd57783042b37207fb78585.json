{"ast":null,"code":"export async function login_service(full_name,email,role,institution,qualification,interests){try{const response=await fetch('/users/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:full_name,email:email,role:role,institution:institution,qualification:qualification,interests:interests})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Login failed');}return await response.json();}catch(error){console.error('Error during login:',error);throw error;}}// GET: Fetch user by email\nexport async function get_Users(email){try{const response=await fetch(\"/users/user\",{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:email})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to fetch user');}return await response.json();}catch(error){console.error('Error fetching user:',error);throw error;}}","map":{"version":3,"names":["login_service","full_name","email","role","institution","qualification","interests","response","fetch","method","headers","body","JSON","stringify","name","ok","errorData","json","Error","message","error","console","get_Users"],"sources":["/home/vin/Desktop/Practice/Projects/SDP PROJECT/Projects 3/Uni-Research-Collab-Platform/frontend/src/services/login_service.js"],"sourcesContent":["export async function login_service(full_name, email, role, institution, qualification, interests) {\n    try {\n      const response = await fetch('/users/login', { \n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: full_name,\n          email: email,\n          role: role,\n          institution: institution,\n          qualification : qualification,\n          interests : interests\n        }),\n      });\n  \n      if (!response.ok) {\n\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n  \n      return await response.json(); \n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error; \n    }\n  }\n\n// GET: Fetch user by email\nexport async function get_Users(email) {\n  try {\n    const response = await fetch(`/users/user`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({email : email})\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch user');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    throw error;\n  }\n}"],"mappings":"AAAA,MAAO,eAAe,CAAAA,aAAaA,CAACC,SAAS,CAAEC,KAAK,CAAEC,IAAI,CAAEC,WAAW,CAAEC,aAAa,CAAEC,SAAS,CAAE,CAC/F,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,cAAc,CAAE,CAC3CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBC,IAAI,CAAEb,SAAS,CACfC,KAAK,CAAEA,KAAK,CACZC,IAAI,CAAEA,IAAI,CACVC,WAAW,CAAEA,WAAW,CACxBC,aAAa,CAAGA,aAAa,CAC7BC,SAAS,CAAGA,SACd,CAAC,CACH,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACQ,EAAE,CAAE,CAEhB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,CAACF,SAAS,CAACG,OAAO,EAAI,cAAc,CAAC,CACtD,CAEA,MAAO,MAAM,CAAAZ,QAAQ,CAACU,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,CAAAA,KAAK,CACb,CACF,CAEF;AACA,MAAO,eAAe,CAAAE,SAASA,CAACpB,KAAK,CAAE,CACrC,GAAI,CACF,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAgB,CAC1CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACX,KAAK,CAAGA,KAAK,CAAC,CACtC,CAAC,CAAC,CAEF,GAAI,CAACK,QAAQ,CAACQ,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,CAACF,SAAS,CAACG,OAAO,EAAI,sBAAsB,CAAC,CAC9D,CAEA,MAAO,MAAM,CAAAZ,QAAQ,CAACU,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}